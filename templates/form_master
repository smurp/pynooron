

<metal:block metal:define-macro="text_display_widget">
<tr>
  <td><strong tal:content="slot_pretty_name">slot_pretty_name</strong></td>
  <td>
  <tal:block condition="exists:slot_value" replace="slot_value">
  </tal:block>
  <tal:block condition="not:exists:slot_value">&nbsp;</tal:block>
  </td>
</tr>
</metal:block>



<metal:block metal:define-macro="text_widget">
<tr>
  <td><strong tal:content="slot_pretty_name">slot_pretty_name</strong></td>
  <td>
  <tal:block condition="exists:slot_value">
    <input 
       type="text" 
       name="" 
       value=""
       tal:attributes="name field_name;
                       value slot_value" 
       size="31"/>
  </tal:block>
  <tal:block condition="not:exists:slot_value">
    <input 
       type="text" 
       name="" 
       tal:attributes="name field_name" 
       size="31"/>
  </tal:block>

  </td>
</tr>
</metal:block>



auto_widget expects the following arguments:
  slot_name
  field_name
  slot_pretty_name
  slot_values

<metal:block metal:define-macro="auto_widget">

<tal:block 
  define="msvt exists:my_slot_value_type;
          slot_value_type python:msvt and my_slot_value_type
	                         or get_slot_value(slot_name,
                                                   ':SLOT-VALUE-TYPE')[0]
                                 or ':STRING'">


  <tal:dummy 
       define="bob string:is my uncle;




msct exists:my_slot_collection_type;
              slot_cardinality python:get_slot_value(slot_name,
                                                     ':SLOT-CARDINALITY')[0];
              slot_collection_type python:(msct and my_slot_collection_type) 
                                          or get_slot_value(slot_name,
                                                     ':SLOT-COLLECTION-TYPE')[0];
              select_size python:slot_cardinality != None and 
                                   slot_cardinality > 1 and 5
                                 or slot_collection_type != None and 5
                                 or 1;

              multiple python:(slot_cardinality != None and 
                               slot_cardinality > 1 and 'multiple') or 
                              (slot_collection_type and 'multiple') or '';



">
 


  <tr>
    <td valign="top">
       <strong tal:content="slot_pretty_name">slot_pretty_name</strong>
       <br/>
       <em tal:content="slot_value_type"></em>&nbsp;<em tal:condition="multiple">(s)</em>
    </td>
    <td>


  <tal:block condition="python:slot_value_type == ':STRING'"
             define="text_value python:slot_values and str(slot_values[0]) or '';
                     len_text_value python:len(text_value)">

   <tal:block repeat="dummy python:multiple and [1,2,3] or [1]">

     <input type="text"
         stal:condition="python:len_text_value <= textarea_threshold"
         name="" value="" size=""         
         tal:attributes="name field_name;
                         size python:slot_value_type == ':STRING' and 31 or 10;
                         value text_value"/>
    </tal:block>

  </tal:block>





  <tal:block condition="python:slot_value_type == ':PARAGRAPH'"
             define="text_value python:slot_values and str(slot_values[0]) or '';
                     len_text_value python:len(text_value)">

   <tal:block repeat="dummy python:multiple and [1,2] or [1]">
     <textarea
          name=""
          cols="60"
          rows="5"
          stal:condition="python:len_text_value > textarea_threshold"
          tal:attributes="name field_name"
          tal:content="text_value"></textarea>

    </tal:block>

  </tal:block>






  <tal:block condition="python:slot_value_type == ':INTEGER'">
  <input type="text" 
         name="" value="" size="10"
         tal:attributes="name field_name;
                         value python:slot_values and slot_values[0] or ''"/>
  </tal:block>





  <tal:block condition="python:slot_value_type != None and
                               not (slot_value_type in [':INTEGER',
                                                        ':STRING',
                                                        ':PARAGRAPH',
                                                        ])">
    <tal:dummy 
      define="options python:get_class_instances(slot_value_type)[0];
              size python:len(options) > select_size and select_size
                                   or len(options)">



    <tal:dummy 
        replace="structure string:<select name=&quot;$field_name&quot; $multiple size=&quot;$size&quot;>"/>

      <tal:block 
         repeat="opt options">
         <tal:block
           define="selected python:str(opt) in slot_values and ' SELECTED' or ''">
           <tal:dummy replace="structure string:<option$selected>$opt</option>"/>
         </tal:block>
      </tal:block>

    <tal:dummy replace="structure string:</select>"/>

<tal_dummy replace="string:multiple=$multiple size=$size select_size=$select_size slot_collection_type=$slot_collection_type"/>
<hr/>

    <br/>
    --<tal:dummy replace="slot_values"/>--
    </tal:dummy>
  </tal:block>


    </td>
  </tr>

  </tal:dummy>
</tal:block>

</metal:block>




$Id: form_master,v 1.10 2003/04/05 18:51:24 smurp Exp $ <a href="/templates/form_master">Show Source</a>
