
put_frame_pretty_name(current_kb(),"Convenience Procedures")
put_slot_values(current_kb(),':DOCUMENTATION',
                ["""These convenience PyOKBC procedures are an experiment
                to discover whether the deficits of ZPTs as a programming
                language can be largely overcome by putting procedures
                in the knowledge."""])


def sort_frames(these):
    str_sort=lambda a,b: cmp(str(a),str(b))
    these.sort(str_sort)
    return these
register_procedure('sort_frames',
                   procedure=create_procedure(body=sort_frames))
del sort_frames


####################################################################

def npts_for_self_and_instances(here):
    npt_for_self = get_slot_values(here,'npt_for_self',
                                   slot_type=Node._all)[0] or \
                                   ['frame_details.html',
                                    'frame.html',
                                    'kb_ancestry.dot'];

    if class_p(here):
        npt_for_instances = get_slot_values(here,'npt_for_instances',
                                            slot_type=Node._template)[0]
    else:
        npt_for_instances = []
    return npt_for_self + npt_for_instances
register_procedure('npts_for_self_and_instances',
                   procedure=create_procedure(body=npts_for_self_and_instances))
del npts_for_self_and_instances



####################################################################

def actions_for_self_and_instances(here):
    #actions_for_self = get_slot_values(here,'actions_for_self',
    #                               slot_type=Node._all)[0]
    actions_for_self = [] # not yet implemented in nooron_app_architecture
    if class_p(here):
        actions_for_instances = get_slot_values(here,'actions_for_instances',
                                            slot_type=Node._template)[0]
    else:
        actions_for_instances = []
    return actions_for_self + actions_for_instances
register_procedure('actions_for_self_and_instances',
                   procedure=create_procedure(body=actions_for_self_and_instances))
del actions_for_self_and_instances


####################################################################
def names_and_pretty_names(frame_list,split=None,kb=None):
    """Return a list of frame_name, (maybe split) pretty_name pairs.
    If split is not None, then use its value to split the pretty_names in
    half on a space."""
    retval=[]
    if not kb: kb = current_kb()
    for fn in frame_list:
        pn = get_frame_pretty_name(fn,kb=kb)
        if pn == None: pn = get_frame_name(fn,kb=kb)
        if split:
            if pn.find(' ') != -1:
                pnl = list(pn)
                order = []
                for i in range(len(pn)/2,0,-1):
                    order.append(i)
                    order.append(-1*i)
                for i in order:
                    if pnl[i] == ' ':
                        break_point = i
                        break
                pnl[break_point]=split
                pn = string.join(pnl,'')
        retval.append((fn,pn))
    return retval
register_procedure('names_and_pretty_names',
                   procedure=create_procedure(body=names_and_pretty_names))
del names_and_pretty_names



