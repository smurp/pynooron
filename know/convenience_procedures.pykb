# -*-mode: python -*-
put_frame_pretty_name(current_kb(),"Convenience Procedures")
put_slot_values(current_kb(),':DOCUMENTATION',
                ["""These convenience PyOKBC procedures are an experiment
                to discover whether the deficits of ZPTs as a programming
                language can be largely overcome by putting procedures
                in the knowledge."""])


def sort_frames(these):
    str_sort=lambda a,b: cmp(str(a),str(b))
    these.sort(str_sort)
    return these
register_procedure('sort_frames',
                   procedure=create_procedure(body=sort_frames))
del sort_frames


####################################################################

def npts_for_self_and_instances(here):
    npt_for_self = get_slot_values(here,'npt_for_self',
                                   slot_type=Node._all)[0] or \
                                   ['frame.html',
                                    'frame_details.html',
                                    'kb_ancestry.dot']

    if class_p(here):
        npt_for_instances = get_slot_values(here,'npt_for_instances',
                                            slot_type=Node._template)[0]
    else:
        npt_for_instances = []
    return npt_for_self + npt_for_instances
register_procedure('npts_for_self_and_instances',
                   procedure=create_procedure(body=npts_for_self_and_instances))
del npts_for_self_and_instances



####################################################################

def actions_for_self_and_instances(here):
    #actions_for_self = get_slot_values(here,'actions_for_self',
    #                               slot_type=Node._all)[0]
    actions_for_self = get_slot_values(here,'actions_for_self',
                                       slot_type=Node._template)[0]

    if class_p(here):
        actions_for_instances = get_slot_values(here,'actions_for_instances',
                                            slot_type=Node._template)[0]
    else:
        actions_for_instances = []
    return actions_for_self + actions_for_instances
register_procedure('actions_for_self_and_instances',
                   procedure=create_procedure(body=actions_for_self_and_instances))
del actions_for_self_and_instances


####################################################################

def get_my_nooron_app_data_kb(here):
    parents =  get_kb_direct_parents(kb=here)
    for parent in parents:
        if instance_of_p(parent,'nooron_app_data',kb=here)[0]:
            return parent
    return None
register_procedure('get_my_nooron_app_data_kb',
                   procedure=create_procedure(body=get_my_nooron_app_data_kb))
del get_my_nooron_app_data_kb


####################################################################
def names_and_pretty_names(frame_list,split=None,kb=None):
    """Return a list of frame_name, (maybe split) pretty_name pairs.
    If split is not None, then use its value to split the pretty_names in
    half on a space."""
    retval=[]
    if not kb: kb = current_kb()
    for fn in frame_list:
        pn = get_frame_pretty_name(fn,kb=kb)
        if pn == None: pn = get_frame_name(fn,kb=kb)
        if split:
            if pn.find(' ') != -1:
                pnl = list(pn)
                order = []
                for i in range(len(pn)/2,0,-1):
                    order.append(i)
                    order.append(-1*i)
                for i in order:
                    if pnl[i] == ' ':
                        break_point = i
                        break
                pnl[break_point]=split
                pn = string.join(pnl,'')
        retval.append((fn,pn))
    return retval
register_procedure('names_and_pretty_names',
                   procedure=create_procedure(body=names_and_pretty_names))
del names_and_pretty_names



####################################################################
def hierarchy_of_nooron_app_instances(kb=None):
    """Return the hierarchy of nooron_app_instances.

    What is returned is a tree of kbs in the form of nested lists.
    meta = [meta_linguistic_shell,
            nooron_pattern_language,
            [uplift_linguistic_shell,
             uplift_pattern_language,
             scalefree_pattern_language,
             conversation_pattern_language]]
    The task is to return a tree structure where any branch,
    however rootward, may itself have leaves.  """
    skip=[]
    if not kb: kb = current_kb()
    skippers = []
    skippers.extend(skip)
    root = kb
    def recorse(kb,skippers,recorse):
        branch = [kb]
        parents = get_kb_direct_parents(kb=kb)
        for parent in parents:
            if not (parent in skippers):
                skippers.append(parent)
                if instance_of_p(parent,'nooron_app_instance',kb=parent)[0]:
                    branch.append(recorse(parent,skippers,recorse))
        if len(branch) == 1:
            return branch[0]
        return branch
    return recorse(kb,skippers,recorse)
register_procedure('hierarchy_of_nooron_app_instances',
                   procedure=create_procedure(body=hierarchy_of_nooron_app_instances))
del hierarchy_of_nooron_app_instances



####################################################################

def npts_by_parentage(direct_types,transformations):
    """
    Objectives:
      1) create a cachable indication of which garments are available
         for frames with certain direct_types.
      2) Organize them first by Class then by 'base garment name' then
         by the extensions which are available for that garment.
      3) Reduce the amount of work which the caller must do (and hence
         the amount of coupling between this method and its caller) by
         including the complete garment identifier (eg. coauthors.dot.jpg)

    ToDo:
      0) make sure we are called in a fashion that gets here's garments!
      1) ensure that this method has its results cached [DONE]
      2) make this recursive (to take proper advantage of caching)
      3) eliminate duplicate garments (eg. :KB kb.html appears twice)
         How? Via COLLECTION-TYPE=set, late filtering or by removing
         the hacky duplicates (in NooronRoot.py) in the first place?  Sigh.
         Late filtering for now.  [DONE]
      4) Fix :THING appearing too early, see PyOKBC innards.
      5) ensure that multiple transformations are applied (eg. .dot.ps.pdf)
         without redundant ones (.dot.jpg and .dot.ps.jpg) and
         without circular ones  (.jpg.ps and .jpg.ps.jpg)
         [DONE] but not in a knowledge-driven way.
      
    [[Author,
       [publications,
          [.html,publications.html],
          [.bibtex,publications.bibtex]
       ],
       [coauthors,
          [.html,coauthors.html],
          [.dot,coauthors.dot],
          [.jpg,coauthors.dot.jpg],
       ],
     ],
     [Human
       [family_tree
          [.html,family_tree.html],
          [.dot,family_tree.dot]
          [.jpg,family_tree.dot.jpg]          
       ],
       [employment_history,
          [.html,employment_history.html],
          [.dot,employment_history.dot],
          [.jpg,employment_history.dot.jpg],
       ],
     ],     
     ...
    ]

    The intention is that the resulting menu will look like:
       Author
         publications (.html)(.bibtex)
         coauthors (.html)(.dot)(.jpg)
       Human
         family_tree (.html)(.dot)(.jpg)
         employment_history (.html)(.dot)(.jpg)
       Frame
         frame_details (.html)
         frame (.html)

       """

    # This fully expanded graph of transformations should be provided by
    # a cached okbc procedure call.
    if transformations == None:
        transformations = {'ps':['pdf','jpg'],
                           'dot':['ps','jpg','svg',['pdf','ps.pdf']],
                           'dbk':['pdf','rtf','tex']} # txt,ps,dvi,tex,texi

    train = [] # filled with passengers and their luggage
    #print "parentage: ",direct_types

    type_silo = []
    count = 0
    all_garmies = []
    passenger_thing = None
    for passenger in direct_types:
        count = count + 1
        npt_for_self = get_slot_values(passenger,'npt_for_self',
                                       inference_level=Node._direct,
                                       slot_type=Node._all)[0]
        npt_for_instances = get_slot_values(passenger,'npt_for_instances',
                                            inference_level=Node._direct,
                                            slot_type=Node._template)[0]
        suitcase = [] # full of garments with adornments
        for garmie in npt_for_self + npt_for_instances:
            if garmie in all_garmies:
                continue
            else:
                all_garmies.append(garmie)
                
            adornments = []
            ext = garmie.split('.')[-1]
            garmie_name = garmie[:-1 * len(ext) -1]
            adornments.append([ext,garmie])
            targs = transformations.get(ext,[])
            for targ in targs:
                if type(targ) == type([]):
                    label = targ[0]
                    suffix = targ[1]
                else:
                    label = targ
                    suffix = targ
                adornments.append([label,garmie+'.'+suffix])
            suitcase.append([garmie_name,adornments])
            
        if suitcase:
            if str(passenger) == ':THING':
                passenger_thing = [passenger,suitcase]
            else:
                train.append([passenger,suitcase])
        
        more_types = get_class_superclasses(passenger,
                                            inference_level=Node._direct)[0]
        type_silo.extend(more_types)
        if count == len(direct_types):
            #print "emptying silo"
            for another in type_silo:
                if not (another in direct_types):
                    #print "  ",passenger,"adding",another
                    direct_types.append(another)
    if passenger_thing:
        train.append(passenger_thing)
    return train    

npts_by_parentage.read = 1
register_procedure('npts_by_parentage',
                   procedure=create_procedure(body=npts_by_parentage))
del npts_by_parentage

