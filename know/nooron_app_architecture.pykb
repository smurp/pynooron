# -*-mode: python -*-
put_direct_parents(['convenience_procedures',
                    #'transformer_ontology',
                    'common_transformers'
                    ])
put_frame_pretty_name(current_kb(),"Nooron App Architecture")
put_slot_values(current_kb(),':DOCUMENTATION',
                ["""This knowledgebase is the very heart of the Nooron
                App Architecture.  This is the ontology which gives
                Nooron Apps (such as Pattern Language, FAQ, Web Log
                and PERT) their rich features.
                It establishes the slots for managing a hierarchy of skins.
                It defines different kinds of nooron_app_component: KBs
                which are either nooron_app_ontologies, nooron_app_wardrobes,
                nooron_app_data or nooron_app_instances which by being
                separate make possible a wildly flexible strategy of
                knowledge recombination.  This approach will also
                support the automatic generation of management screens for
                adding, editing, versioning and deleting information.
                """])
create_slot('merges_in',
            own_slots=[[':DOMAIN','nooron_app_component']],
            doc="""Which nooron_app_components does this kind of
            nooron_app_component have as direct_parents?""")
create_slot('npt_for_instances',
            own_slots=[[':SLOT-VALUE-TYPE',':STRING'],
                       [':DOMAIN',':CLASS'],
                       [':SLOT-COLLECTION-TYPE','set']],
            doc="""Nooron_app_wardrobes should have template_slots of this
            type on all classes which have specific nooron_page_templates
            for their instances.
            each class whose instances are supposed to be surfed.  The
            associated resourceRef should contain the url of a Nooron Page
            Template (NPT) which is appropriate for displaying instances of
            the class on which ntp_for_instances is an occurrence.""")
create_slot('actions_for_instances',
            own_slots=[[':SLOT-VALUE-TYPE',':STRING'],
                       [':DOMAIN',':CLASS'],
                       [':SLOT-COLLECTION-TYPE','set']],
            doc="""Nooron_app_wardrobes should have template_slots of this
            type on all classes which have specific nooron_page_templates
            for their instances.""")
create_slot('actions_for_self',
            own_slots=[[':SLOT-VALUE-TYPE',':STRING'],
                       [':DOMAIN',':CLASS'],
                       [':SLOT-COLLECTION-TYPE','set']],
            doc="""Nooron_app_wardrobes should have template_slots of this
            type on all classes which have specific nooron_page_templates
            for their instances.""")
create_slot('npt_for_self',
            own_slots=[[':SLOT-VALUE-TYPE',':STRING'],
                       [':SLOT-COLLECTION-TYPE','set']],
            doc="""Nooron_app_wardrobes should have npt_for_self
            template_slots on all classes which have specific
            nooron_page_templates for their instances.""")
create_slot('slot_display_order',
            own_slots=[[':SLOT-VALUE-TYPE',':SLOT'],
                       [':SLOT-COLLECTION-TYPE','list']],
            doc="""A list of the slots to display, in the order they
            should be displayed.  This is respected by the template
            frame_as_html but not required by it.  In other words,
            slot_display_order is optional on any nooron_app_class.""")

#create_slot('kb_owner',
#            own_slots=[[':DOMAIN',':KB'],
#                       [':SLOT-VALUE-TYPE','nooron_user']],
#            doc="""The KB Owner is the Person who has administrative control over the KB.""")
#create_class('nooron_user',
#             doc="""A nooron_user is the identifier for a person (or bot presumably) who uses Nooron.  A UserID.""")


create_class('nooron_app_component',
             direct_superclasses=[':KB'],
             doc="""Nooron app components are knowledgebases which
             have features which are made use of by code/NooronApp.py
             """)
create_class('nooron_app_ontology',
             own_slots=[['merges_in',]],
             direct_superclasses=['nooron_app_component'],
             doc="""This is the ontology for a nooron app, equivalent to a
             relational database schema or to a set of class 
             definitions for an object oriented system.  Knowledge bases of
             this kind depend on nothing, except possibly other ontologies.
             It would, for example be fine to create a nooron_app_ontology
             which extended another.""")
create_class('nooron_app_data',
             direct_superclasses=['nooron_app_component'],
             own_slots=[['merges_in','nooron_app_ontology']],
             doc="""KBs of this kind contain 'INDIVIDUALs' which are
             instances of the CLASSes defined in some nooron_app_ontology.
             These KBs are equivalent to the records in a database
             (as opposed to the schema)
             or the objects in an object oriented system
             (as opposed to the class definitions themselves).
             """)
create_class('nooron_app_wardrobe',
             direct_superclasses=['nooron_app_component'],
             own_slots=[['merges_in','nooron_app_ontology']],
             doc="""A nooron_app_wardrobe associates a number of
             presentation resources such as templates with an
             ontology (specifically a nooron_app_ontology) so that
             all that is needed is some data to make a usable nooron app.
             An app skeleton is not itself a runnable app.  It is a
             definition of the resources which when brought together with
             suitable data would be a runnable app.  A wardrobe must
             know about the nooron_app_ontology (but not about any particular
             nooron_app_data).  It must know about which presentation
             templates to use for the various classes specified in the
             nooron_app_ontology. It must know about whatever programming
             resources are required to make the app work.""")
create_class('nooron_app_instance',
             direct_superclasses=['nooron_app_component'],
             template_slots=[['npt_for_self','nooron_app.html'],
                             ['actions_for_self','save_data.html']],
             own_slots=[['merges_in','nooron_app_wardrobe','nooron_app_data']],
             doc="""A nooron_app_instance is an actual runnable app.
             It is the combination of two things: a nooron_app_wardrobe
             and some nooron_app_data.  In fact, multiple nooron_app_wardrobe
             KBs and multiple nooron_app_data KBs can be the direct_parents
             of a nooron_app_instance KB.  In this fashion, diverse (possibly
             distributed) ontologies and (possibly distributed) data can
             be brought together into a single Nooron application.""")
create_class('nooron_app_class',
             template_slots=[['slot_display_order']],
             doc="""Classes defined in nooron_app_ontology knowledge bases
             should be marked as instances of nooron_app_class.  They
             then inherit facitilies for automatic display such as,
             initially, slot_display_order.""")

#create_class('collection_of_kbs',
#             own_slots=[[':DOMAIN',':KB']],
#             doc="""A collection_of_kbs is a kb (possibly transient) which
#             has kbs as its parents.""")

# maybe there should be a kb like: nooron_app_core_wardrobe for...
create_class(':THING',
             template_slots=[['npt_for_self',
                              'frame.html',
                              'frame_details.html',
                              ],
                             ['actions_for_self',                              
                              #'change_pretty_name.html',
                              'put_frame_details.html',
                              #'delete_frame.html'
                              ]])
create_class(':CLASS',
             template_slots=[['npt_for_instances',
                              'class_and_instances.html',
                              #'class_and_subclasses.html'
                              ],
                             ['actions_for_instances',
                              'create_individual.html',
                              #'delete_frame.html'
                              ]])

create_class(':KB',
             template_slots=[['npt_for_self',
                              'classes_in_kb.dot',
                              'class_hierarchy.dot',
                              'kb_ancestry.dot',
                              'kb.html'],
                             ['actions_for_self',
                              #'save_kb_as.html',        # probly werkin
                              #'put_direct_parents.html' # probly werkin
                              ]])


### Experimental subclasses of :STRING for the purposes of guiding form generation.
create_class(':WORD',
             direct_superclasses=[':STRING'],
             doc=""":WORD is a :STRING which has no spaces.""")

create_class(':PHRASE',
             direct_superclasses=[':STRING'],
             doc=""":PHRASE is a :STRING which can be confined to an INPUT of type TEXT.""")

create_class(':PARAGRAPH',
             direct_superclasses=[':STRING'],
             doc=""":PARAGRAPH is a :STRING which could benefit from a TEXTAREA.""")

create_class(':HREF',
             direct_superclasses=[':WORD'],
             doc=""":HREF is a :WORD which may be a local, relative or absolute url.""")

             


