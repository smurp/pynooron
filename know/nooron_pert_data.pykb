put_direct_parents(['pert/pert_ontology'])
put_instance_types(current_kb(),['nooron_app_data'])
create_individual('Nooron_0_2_1',
                  pretty_name='Nooron 0.2.1',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 0],
                             ['Predecessors', ],
                             ['Status', 'complete'],
                             ['TaskDescription', """This is a dummy START job marking the state
              which was current when nooron_pert was begun."""],
                            ])
create_individual('PyOkbcCorrectness',
                  pretty_name='PyOkbc Correctness',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['Status', 'complete'],
                             ['TaskDescription', 'Fix bugs in get_slot_values, etc..'],
                            ])
create_individual('RunOnPort80',
                  pretty_name='Run On Port 80',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 2],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['Status', 'complete'],
                             ['TaskDescription', """Solve the 'starting on port 80' problem."""],
                            ])
create_individual('FleshOutPrimordialSlots',
                  pretty_name='Flesh Out Primordial Slots',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 2],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', """Attach appropriate constraint slots on the slots
              in the PRIMORDIAL_KB."""],
                            ])
create_individual('FormGeneration',
                  pretty_name='Form Generation',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 5],
                             ['Predecessors', 'FleshOutPrimordialSlots'],
                             ['Status', 'complete'],
                             ['TaskDescription', """Create very simple forms automatically by
              using widgets based on slot type."""],
                            ])
create_individual('OkbcConstraints',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 5],
                             ['Predecessors', 'FleshOutPrimordialSlots'],
                             ['TaskDescription', """Create very simple forms automatically by
              using widgets based on slot type."""],
                            ])
create_individual('FormActions',
                  pretty_name='Form Actions',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 2],
                             ['Predecessors', 'FormGeneration', 'AuthorizationStubbedIn', 'OkbcConstraints'],
                             ['TaskDescription', """Write create_individual and create_class
              npts which are limited by authorization
              stubs.  method:add_slot_value """],
                            ])
create_individual('CriteriaAndEvaluationsOntology',
                  pretty_name='Criteria and Evaluations Ontology',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 24],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['References', 'http://www.nooron.org/know/nooron_pattern_language/CriteriaAndEvaluations'],
                             ['TaskDescription', 'Create initial ontology Criteria and Evaluations.'],
                            ])
create_individual('CriteriaAndEvaluations',
                  pretty_name='Criteria and Evaluations',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 24],
                             ['Predecessors', 'FormActions', 'CriteriaAndEvaluationsOntology'],
                             ['TaskDescription', 'Criteria and Evaluations'],
                            ])
create_individual('PyKb_save_kb',
                  pretty_name='PyKb save_kb',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', 'Ensure that save_kb is working for PyKb.'],
                            ])
create_individual('ThroughTheWebEditing',
                  pretty_name='Through-the-web editing',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'PyKb_save_kb', 'FormActions', 'CreateNewFramesInRightKB', 'RunOnPort80', 'PyOkbcCorrectness'],
                             ['TaskDescription', 'Make it possible to at least add and edit frames.'],
                            ])
create_individual('AuthorizationStubbedIn',
                  pretty_name='Authorization Stubbed In',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', """Permit writing only when the user is visiting from
              some fixed IP address list, or when they have entered
              one of a list of userids."""],
                            ])
create_individual('DownloadableKBFiles',
                  pretty_name='Downloadable KB Files',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 2],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', """Ensure that KB_NAME.pykb or KB_NAME.tell downloads
              the original source file."""],
                            ])
create_individual('NPTsInSubdirs',
                  pretty_name='NPTs in Subdirectories',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 4],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', """Ensure that NPTs can live in subdirectories of
              /know (such as /know/pert) and be accessed appropriately."""],
                            ])
create_individual('NooronAppRegistry',
                  pretty_name='Nooron App Registry',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 2],
                             ['Predecessors', 'NPTsInSubdirs'],
                             ['TaskDescription', 'Create KB containing information about Nooron Apps.'],
                            ])
create_individual('RemotelyInheritNooronApps',
                  pretty_name='Remotely Inherit Nooron Apps',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 8],
                             ['Predecessors', 'SubdirsAsKBs', 'DownloadableKBFiles', 'TellKb'],
                             ['TaskDescription', """Make it possible for someone to create a
              nooron_app_instance which points to a nooron_app_wardrobe
              which actually lives on a different machine, and have it
              all work."""],
                            ])
create_individual('SubdirsAsKBs',
                  pretty_name='Subdirs as KBs',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', """Make subdirectories of /know, (e.g. /know/pert)
              themselves be KBs.  They need to be surfable and
              representable as .tell or .pykb, ultimately."""],
                            ])
create_individual('EncodingPipelines',
                  pretty_name='Encoding Pipelines',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 6],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['Status', 'complete'],
                             ['TaskDescription', """Ensure that sequences of extensions (e.g. tar.gz,
              .dot.svg, or .dbk.pdf) properly transform the output.
              All relationships between content-types and their legal
              encodings to be managed as knowledge."""],
                            ])
create_individual('CachedOutput',
                  pretty_name='Cached Output',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 8],
                             ['Predecessors', 'EncodingPipelines'],
                             ['Status', 'complete'],
                             ['TaskDescription', """Devise a system of request parameter hashing
              so that output is only regenerated when needed and
              that intermediate forms as well as encodings of them
              are appropriately cached and delivered.  For example,
              nooron_pattern_language.dot would be cached as would
              nooron_pattern_language.dot.pdf.  The .dot would be
              regenerated only when the knowledge or template changed.
              The .pdf would only be regenerated from cached .dot
              when the .dot changed.  A system of hashes based on
              canonical forms of the requests with knowledge, template
              and preferences mixed in ought to do it.
              """],
                            ])
create_individual('DiskCacheFlushing',
                  pretty_name='Disk Cache Flushing',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'CachedOutput'],
                             ['TaskDescription', 'Delete items in the disk cache when they are stale.'],
                            ])
create_individual('CachingMixin',
                  pretty_name='Caching Mixin',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['Status', 'complete'],
                             ['TaskDescription', """Put wrapper functions around all kb read operations
              which cache the output keyed on the paremeters."""],
                            ])
create_individual('TellKb',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', 'Get TellKb working correctly for reading and saving.'],
                            ])
create_individual('CentralAppRegistry',
                  pretty_name='Central Registry of Nooron Apps',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'ThroughTheWebEditing', 'NooronAppRegistry', 'RemotelyInheritNooronApps'],
                             ['TaskDescription', """Create a Central Registry of Nooron Apps where the
              apps themselves exist remotely."""],
                            ])
create_individual('NotSoBasicAuthentication',
                  pretty_name='Not So Basic Authentication',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 6],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['References', 'http://www.nooron.org/know/nooron_pattern_language/NotSoBasicAuthentication'],
                             ['TaskDescription', """Users enter an url (root-relative or absolute with fqdn)
              as their userid and a password which when crypted must
              equal a crypted value in the NSBA-KB at the url."""],
                            ])
create_individual('UserPreferredGarments',
                  pretty_name='User-Preferred Garments',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 4],
                             ['Predecessors', 'NotSoBasicAuthentication'],
                             ['References', ],
                             ['TaskDescription', """Defer to a user's preferences in their NSBA-KB for
              things such as the garment to default to for instances
              of each class.  Maybe when authenticated users surf a
              nooron site, when they visit a kb, it should be with their
              NSBA-KB as a parent, to avoid complicated look-aside."""],
                            ])
create_individual('UserBasedAuthorization',
                  pretty_name='User-based Authorization',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 50],
                             ['Predecessors', 'NotSoBasicAuthentication', 'AuthorizationStubbedIn'],
                             ['References', 'http://www.erights.org'],
                             ['TaskDescription', """Permit read, write, modify and other registerable
              capabilities based on the who the user has authenticated
              themselves as.  Seriously examine capabilities as
              implemented in E before tackling this task."""],
                            ])
create_individual('HTMLWithPictures',
                  pretty_name='HTML with Pictures',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 2],
                             ['Predecessors', 'CachedOutput'],
                             ['Status', 'complete'],
                             ['TaskDescription', 'Put pictures (.jpg,.svg) from graphviz in html.'],
                            ])
create_individual('DocBookWithPictures',
                  pretty_name='DocBook with Pictures',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 4],
                             ['Predecessors', 'CachedOutput'],
                             ['TaskDescription', """Put pictures (.jpg,.ps) from graphviz into DocBook
              output."""],
                            ])
create_individual('CreateNewFramesInRightKB',
                  pretty_name='Create new frames in the right KB',
                  direct_types=['Task'],
                  own_slots=[['EstimatedHours', 3],
                             ['Predecessors', 'Nooron_0_2_1'],
                             ['TaskDescription', """When adding frames which are instances of a
              nooron_app_class, those instances should be created in
              the appropriate nooron_app_data kb."""],
                            ])

