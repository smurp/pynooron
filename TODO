
TODO for Nooron

* correctness
** why doesnt nooron_pattern_language.get_instance_types return :KB?
** because get_class_superclasses is buggy!!
** not automatically writing to the correct kb (ie a nooron_data KB)
** save_kb (respect kb_local_only_p by telling parent kbs to save too)
* performance
** cache get_class_superclasses?
* completeness
** make nooron.py sensitive to commandline parameters
** finish nooron (init.d script)
** log errors to separate error log
** some authorization stubbed in
** make /know/pert/ a surfable thing (kb?, place?)
* useability
** make /know --> /know__openable_kbs.html
** fix available garments defaults for site_front.html and other weirdos
** fix truncated (at char 1024) error reporting
** redesign "available garments" to add links for typical conversions
   such as dot.jpg, dot.ps, dot.pdf, dbk.ps, dbk.pdf and so on
   e.g   aon.dot (.jpg) (.ps) (.ps.pdf)
         -------  ----   ---   ------- 
** add "available actions" to standard_master
** put "available actions" and "available garments" in better places
   Probably redo entire layout of standard_master
*** put "main" across entire window to permit rendering before trailing
    unsized images are available


BUGS
** wrong garment options on site_front_as_html
** orange and green!
** ensure that kb_as_html is default template for kbs

after v0.2
* implement IntermediateReferent (or SubjectIndicators?)
Instances of IntermediateReferent are frames which
can be bibliographic references, URL's and their titles, 
or SubjectIndictators ala TopicMaps.
* come up with better terminology for distinguishing Nooron Apps (equivalent
to Zope products) from nooron_app_instances (which are the *uses* of those
products)
* create individual directories for nooron_apps, where the _ontology, 
_wardrobe and garments all live.  (Along with procedures and widgets,
when they get systematized.)
* update http://www.noosphere.org/background/how_to
* wrap garments in knowledge
Hmm, two goals: 
  1) keep the garments on-disk as trivially editable files
  2) make them accessible as frames (for metadata)
Solutions:
  1) Come up with some Connection type (or kb-type?) which treats files
  as frames and merges into them any other info discovered in a per-directory
  .pykb 
  2) put all the frame info *into* the garments as leading comments
    (ala Zope's on-disk representation of dtml, python-script, etc. )
  3) look for a .tell file beside each normal content file (e.g. each npt)

* kb interchange
** make /know/some_kb surfable, /know/some_kb.pykb downloadable

* performance!
** cache NPT instances (to improve performance)
** cache intermediate results (types, slots, instances, etc.) on frames

* graphics
** create kb_as_svg
** create kb_as_ps
** examine PIL for graphics generation

* criteria and evaluations
* user preferences
** NotSoBasicAuthentication

* communicate the overall vision
Nooron can grow as suggested because it is not limited by factors
such as: 
 - a specific rigid knowledge model
 - bound to a particular human language
 etc, etc


OOOOLD STUFF:

The 'Roadmap' aspects of this have been superceded by:
  http://www.noosphere.org/discuss/zwiki/NooronRoadmap

Principles Guiding ToDo Prioritization
  - scratch my own itch
  - do tough stuff early (to ensure they affect design early)
  - release early, and have something usable (to promote participation)
      (opposed to scratch own itch?)

TODO (prioritized as above, roughly)
  - deliver templates by version

  - store evaluations (in sql?)
  - create evaluation facilities
  - filter/sort/format things on the basis of evaluations 
      (or other attributes)
 
  - ensure that here/blah uses acquisition-like something
  - test root/blah and container/blah
  - implement adding of topics
    - set up form and action architecture
      - early uses to include:
        - loading KBs
        - creating frames
        - creating KBs
        - save_as

  - create user authentication system
    - implement NotSoBasicAuth

  - display weblog.xtm
  - generate some svg now
  - time for users


