


TODO (to get v0.2 released)
  - solve problem with topic merging:
    Why don't 

  - add 'type' sensitivity to GWApp:
        def getOccurringTopics(self,scopes = [], type = None):
        def getOccurrenceResources(self,scopes = [], type = None):
        def getOccurrences(self,scopes = [], type = None):
        def getPlayedRoles(self,scopes = [], type = None):

The 'Roadmap' aspects of this have been superceded by:
  http://www.noosphere.org/discuss/zwiki/NooronRoadmap

Principles Guiding ToDo Prioritization
  - scratch own itch
  - do tough stuff early (to ensure they affect design early)
  - release early, and have something usable (to promote participation)
      (opposed to scratch own itch?)

TODO (prioritized as above, roughly)
  - deliver templates by version
  - display instances in class-specific templates (if they exist)
    ? are such associations in topic maps?  sounds like they should be
    ? use ython code or templates to select the right template

  - store evaluations (in sql?)
  - create evaluation facilities
  - filter/sort/format things on the basis of evaluations 
      (or other attributes)
  
  - implement serving of /map/
    - load topicmaps as specified in the root topicmap
    Q. make root (or /map) a topic map? 
    A. I guess.
  - write things to a topic map (and save them)
  - ask Jan whether IDs are a part of the graph

  - ensure that here/blah uses acquisition-like something
  - test root/blah and container/blah
  - implement adding of topics
    - set up form and action architecture
      - early uses to include:
        - loading topicmaps
        - creating topics
        - creating topicmaps

  - create user authentication system
    - implement NotSoBasicAuth

  - create a nano-fsa 
  - display weblog.xtm
  - generate some svg now
  - time for users

TODO  
  - sTQML queries to figure out:
    - instances of a class
    - attributes of a topic
    - classes of a topic
    - 
  - specific queries required for reproducing nanotech scenario 


TODO for nanotech scenario
  - create ontology for scenarios

