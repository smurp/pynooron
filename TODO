-*-mode: outline -*-

2010.12.30

* documenation
** where should the docs live?
*** the nooron_faq?
*** some other kb?
*** a normal document?
* BestPractices:
** meditate on health motivators first thing each day
** stock and have prepared raw snackables
** exclude the empty starches
* Meta to BestPractices:
** categories:
*** health
*** work
*** mind
*** interpersonal
*** money
* BestPractice slots:
** inCategory
** description
* EatTheDogFood milestone:
** embed svg in html (because graphviz on karaba has no bitmap support)
** nooron_app_diagram
*** show generic connections
** best_practices
*** smarten up nooron_app.html to show most specific image for kb as a whole
** general improvements:
*** convenience procedure for sorted_instances_of_classes
*** more knowledge-driven graph creation
** nooron_project
*** distinguish milestones from tasks in .dot and .html
*** move these TODO entries into the nooron_project as needed
* prep for PublicReleaseOne milestone:
** add htpasswd support
*** using http://trac.edgewall.org/browser/trunk/contrib/htpasswd.py
** make KBAdapter for htpasswd
** make KBAdapter for /etc/passwd (only for use when ssl used)
** implement special security restrictions when access is insecure
*** eg. Can only manage packages, users and transformers via https

** remove spurious printf cruft
** remove warnings
** look for rough optimization
** add KBAdapter around pellet.sh


2008.09.13
* prep for new release
** package using distutils (or whatever)
** clean up
*** clean out crud and sensitive information
*** clean up tests so they are as clean as possible
** make release usable for something
*** fix editing
*** set up default authorization
*** write/update docs for installation and initial use
** convert from docbook 3.1 to 4.1.2
*** docs
  http://www.docbook.org/tdg/en/html/docbook.html
  http://www.docbook.org/tdg/en/html/article.html
  http://en.wikipedia.org/wiki/Docbook
*** recipe
**** change beginning to
<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
**** replace artheader with articleinfo


TODO for Nooron

* scratch own itch
** make project_app more useful
with the motivation of having it accelerate Nooron development
*** debug ThroughTheWebEditing
*** automate checkin of saved project data
*** finish software_project_book.dbk 
**** show all kinds of things in the kb: Tasks, Actors, Use_Cases
*** ontologize milestones
*** ontologize roadmap
*** ontologize bugreport



** enter evaluations
** edit in wiki form
** http put in nooron
** Identities
*** preferences
*** evaluation
*** attribution
*** admin rights (ownership)
** Communities
*** members
*** enrolement
*** favors interop
** get another site up (smurp.com?)
** get blogs working well

* possible activities
** convert kbs on the fly 
*** examples:
**** /know/kb_name.pykb 
**** /know/kb_name.tell
**** /know/kb_name.okbc
**** /know/kb_name.owl
**** /know/kb_name.xtm
**** /know/kb_name.sql
**** /know/kb_name/some_class.csv

* aids evaluation display
** :SLOT-INVERSE 
** follow-slot-chain

** finally add lisp
*** benefits:
**** basis for tell-ask interface
**** basis for reading and writing .okbc files
**** basis for reading and writing .tell files
***** good basis for refactoring pyokbc to assertion-centricity
**** safer procedures in knowledge-bases
***** leading to true restricted reading of remote knowledge-bases
**** begin interoperability testing with okbc-lisp

** make :DOCUMENTATION editable in put_frame_details.html
** make some BookKeepingSlots (set their cardinality too!)
*** how to do this?
**** have 'intrinsic frames' which hang off the kb-type?
**** maybe transient frames would do it too?
*** issues
**** so where not?
***** NOT in nooron_app_architecture (this is a pyokbc issue)
***** NOT in PrimordialKB (that is alreadly polluted)
***** NOT in PrimordialKB (we need a kb-type specific mechanism)
**** but where?
***** In AbstractFileKb?
*** which slots?
**** SIZE, ATIME, MTIME, CTIME,UID, GID, (unix specific?)
**** AccessTime, CreationTime, ModificationTime (not platform specific)
** ??include bookkeepingslots CreatedByAgent and ModifiedByAgent
** why is :DOCUMENTATION busting everything?
** fix the slot-cardinality-constraint problem
** why is the Task -> UseCase edge not appearing in entity_relationship.dot
** implement create_kb.html
** build a suggestion box app
** ?? use suggestion box as testcase for criteria and evaluations
** logins should *all* be dude@identitybroker.foo starting now!

** send email by implementing an Outbox KB-type
** view email archives via IMAP and/or mbox kb-types (POP sucks)
** implement full webmail on above
** FOAF, VFC, Resume, current-user-degree-of-separation-graph

** capture typical access_log info as knowledge (in standard combined format?)
** implement typical weblog reporting stuff (graphically, etc)
** knowledgebases negotiate for frames being written, society-of-mindishly
** finally do cvs stuff???
*** note relationship with version creation, cvs,
** implement wikiesque put_frame_details and create_individual ala Tom

** implement TopicSpaceKBType
** CSVKbType
** first whack at PostgreSqlKBType
** RSS feeds from web_log (as kbtype or as garment???)
** make more typical garments for weblog
** how hard would C2-style wiki's be?



* possible priorities
** flesh out attribution of add and change

** flesh out AUTHENTICATED_USER
*** make it an instance of a class wrapped around a kb? a frame?
** flesh out login/identity creation
*** per-user-kbs:
**** use cases:
***** publish identity for NSBA (NotSoBasicAuthentication) /know/user/bob/identity
***** store overriding garments for own use: /know/user/bob/standard_master
***** store new garments for own use: /know/user/bob/pattern_language_cartoon.html
***** publish evaluations for everyone's heeding:
****** access by subject:   /know/user/bob/ratings/subj/www.it.com/path/to/subject
****** access by class:     /know/user/bob/ratings/clas/www.it.com/path/to/class
****** access by criterion: /know/user/bob/ratings/crit/www.it.com/path/to/criterion
***** access garments (new and overriding) within the Nooron instance:
****** put $identity at the beginning of the FileSystemConnection path

*** save FF goodies like firstname, lastname, groups, etc in per-user kbs
**** create an identity-kb upon first successful (non-NSBA) login
**** create mapping between FF fields and Nooron identity-kb fields
**** the mapping should exist in the friendly_favors_authenticator python class
*** authentication path=local_identity_auth:not_so_basic_auth:friendly_favors_auth


** ontologize criteria
** knowledge-driven security
** login against favors.org (relation to NotSoBasicAuthentication?)
** prepare NxNxNx... argument in knowledge
** get graphics into docbook
** create_kb (so new kbs can be created via the web)
** put_direct_parents (so pattern languages can be added to linguistic shells)
** work around recursion problems with ZPT
*** nested linguistic shell book garment
*** nested linguistic shell graph
** implement some new graphics with VCG
** replace old graphics with VCG


** xtm output, done down deep (if easily, else as garment)



* www.noosphere.org
** update FAQ
** refactor CVS contents for nooron.org, noosphere.org, smurp.com


* through-the-web-editing
** already completed forms
*** put-pretty-name (change_pretty_name.html)
*** create_individual.html
*** save_data.html
*** save_kb_as.html
*** put_frame_details

** high priority forms for okbc operations (in rough priority order)
**** What intended purpose(s) guide this prioritization?
***** make project management usable
****** adding, editing, deleting Tasks
put_slot_values, put_frame_details
set_TaskStatus, put_slot_values
delete_frame
***** misc, spontaneous, personal data management
***** pattern language maintenance
***** FAQ maintenance
***** online brainstorming (ala group genius)
***** Central Registry of Nooron Apps
*** put-kb-direct-parents
*** create-kb
*** copy-kb
*** save-kb
*** revert-kb
*** copy-frame
*** delete-frame
*** put-frame-name
*** create-class
*** expunge-kb
*** create-slot
*** delete-slot
*** attach-slot
*** detach-slot
*** put-slot-values
*** put-frame-details

** other conceivable forms for okbc operations
*** add-class-superclasses
*** put-class-superclasses
*** remove-class-superclasses
*** add-instance-type
*** put-instance-types
*** remove-instance-type
*** add-slot-value
*** attach-slot
*** delete-slot
*** detach-slot
*** put-slot-value
*** put-slot-values
*** replace-slot-value


** okbc methods possibly required by the above
*** get-frame-details
*** follow-slot-chain
*** get-classes-in-domain-of
*** get-frames-with-slot-value



* Nooron features
** fix up nooron_app.html
** debug pattern_language.dbk
** get transform_dbk_2_ps and transform_dbk_2_pdf working
** consider surfable frame.slots
eg: /know/nooron_pert/FormActions/EstimatedHours => 3
eg: /know/nooron_pert/FormActions/EstimatedHours/put_slot_value

* completeness
** make nooron.py sensitive to commandline parameters
** finish nooron (init.d script)
** log errors to separate error log
** some authorization stubbed in
** make /know/pert/ a surfable thing (kb?, place?)
** implement proper cache flushing, tee hee

* useability
** make some nice documentation for "available_garments"
** fix available garments defaults for site_front.html and other weirdos
** fix truncated (at char 1024) error reporting
** put "available actions" and "available garments" in better places
   Probably redo entire layout of standard_master
*** put "main" across entire window to permit rendering before trailing
    unsized images are available

* correctness
** get_instance_types should not return :INDIVIDUAL when inference_level=DIRECT
** not all KBs should not have PRIMORDIAL_KB as a direct_parent
** ensure that slots with a CARDINALITY of 1 only return a single value
   (specifically, the :DOCUMENTATION slot on frames in the PRIMORDIAL_KB)
** what the hell is http://192.168.1.11/__openable_kbs.html doing?
** save_kb (respect kb_local_only_p by telling parent kbs to save too)

* performance
** debug putting PRIMORDIAL_KB only at the root
** is there value in marking a frame as being the deepest of that name
   and hence all deeper kbs can be ignored (for some purposes)

* BUGS
** pattern_language.dbk
** class_hierarchy.dot
** classes_in_kb.dot
** pattern_language output in .dbk (DocBook) format broken (for a couple of reasons!) 
** there are far too many edges in class_hierarchy sometimes 
** classes_in_kb graphs (dot,ps,etc) are quite broken at the moment 
** nooron_app.html should be really nice (not all confusing and nerdy the way it is), just haven't gotten there yet 
** knowledge-bases which are in subdirectories of /know are not surfable  (e.g. /know/fsa/fsa_wardrobe) 


* implement IntermediateReferent (or SubjectIndicators?)
Instances of IntermediateReferent are frames which
can be bibliographic references, URL's and their titles, 
or SubjectIndictators ala TopicMaps.
* come up with better terminology for distinguishing Nooron Apps (equivalent
to Zope products) from nooron_app_instances (which are the instances of those
products)

* implement triggering of saving, but when?
** at user whim
** on kb close
** after every write operation
** periodically

* have instances written to nooron_app_data KBs, but how?
** Have the original actions specify the target kb explicitly.
** Have the nooron_app_instance delegate creation to assoc. *_data.
** Have NooronApp do the delegating.
** Have knowledge trigger the delegation
*** Some template slot on nooron_app_instance such as:
      delegate_writing_to_data_kb
**** No! No! We already know that we want to do this
** What we need to handle this in a more generic fashion.
** What are the issues?
*** Sometimes classes need to have their instances stored in particular KBs.
**** This arises when multiple _ontology and _data kbs are in use.
*** Sometimes users want to store their work other than in the default place.
**** e.g. When they want to make private notes or modifications.
**** e.g. When the source of the rest of the data is read-only.
** What are the knowledge-driven ways to do these sorts of things?
*** Have slots on kbs indicating the classes they can store instances of.
*** Have a frame 'STORAGE_PREFERENCES' which has slots which tell things where to go.
*** Have slots on the nooron_app_instance kb itself which tell things where to go.
*** Have slots on :CLASS which guide storage policies.  
Generally overridden on particular classes.  The problem is that each class 
needs to be handled separately (unless some wonderful slot type can 
simplify this.)  :SAME-VALUES with a slot chain might prove useful.
** What is the simplest solution for now?
*** Have OkbcOperation detect attempts to create in nooron_app_instances and
replace them with creation attempts in appropriate _data kbs.




* update http://www.noosphere.org/background/how_to

* Wrap Garments in Knowledge
** Goals: 
*** keep the garments on-disk as trivially editable files
*** make them appear to be frames (for metadata)
** Solutions:
*** Come up with some Connection type (or kb-type?) which treats files
  as frames and merges into them any other info discovered in a per-directory
  .pykb or .tell
     [pros:
         easy, flexible choice of 'central' knowledge format (.db|.tell|.xtm etc)
         doesn't contaminate content files with metadata
      cons:
         all knowledge travels together, bloats together, corrupts together]
*** Put all the frame info *into* the garments 
     (as leading comments ala Zope's on-disk representation of dtml, python-script,etc)
     (or in HEADER format ala mail messages)
     [pros:
         knowledge ineluctably associated with content
         knowledge copies with content, etc
      cons:
         knowledge ineluctably associated with content
         have to use special tool to get at content w.o. knowledge
         insufficiently editable, flexible, customizable]
*** look for a .tell file beside each normal content file (e.g. each npt)
     [pros:
         easier to edit than if metadata in the files
      cons:
         lots of separate files]
*** look in a magically named subdirectory (ala .AppleDouble) for file
     of the same name but containing knowledge
     [pros:
         simple to find
      cons:
         how to guard .MysteryMeatDir from normal handling? its dotfileness?]


* Things to Ontologize
** Analysis
Really should ontologize Analysis so that one can peek into 
the analysis associated with any old thing.
*** Classes:
**** goals
**** proposals, 
**** pros
**** cons
