
TODO for Nooron

[part of the argument for the feasibility of the project]
Nooron can grow as suggested because it is not limited by factors
such as: 
 - a specific rigid knowledge model
 - bound to a particular human language
 etc, etc

* fix get_class_instances bug in nooron
Is it in Nooron or in class_and_instances_as_html?
* make PRIMORDIAL_KB surfable
* turn off all print statements
* figure out how to display a NooronApp instance
** app_front_object
** app_front_template
** app_instance.npt_for_me
* figure out how to configure a nooron instance


after v0.2
* cache NPT instances (to improve performance)
* cache intermediate results (types, slots, instances, etc.) on frames
* create kb_as_svg
* create kb_as_ps
* examine PIL for graphics generation


The 'Roadmap' aspects of this have been superceded by:
  http://www.noosphere.org/discuss/zwiki/NooronRoadmap

Principles Guiding ToDo Prioritization
  - scratch own itch
  - do tough stuff early (to ensure they affect design early)
  - release early, and have something usable (to promote participation)
      (opposed to scratch own itch?)

TODO (prioritized as above, roughly)
  - deliver templates by version

  - store evaluations (in sql?)
  - create evaluation facilities
  - filter/sort/format things on the basis of evaluations 
      (or other attributes)
 
  - ensure that here/blah uses acquisition-like something
  - test root/blah and container/blah
  - implement adding of topics
    - set up form and action architecture
      - early uses to include:
        - loading KBs
        - creating frames
        - creating KBs
        - save_as

  - create user authentication system
    - implement NotSoBasicAuth

  - create a nano-fsa 
  - display weblog.xtm
  - generate some svg now
  - time for users


TODO for nanotech scenario
  - create ontology for scenarios

