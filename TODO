
TODO for Nooron

* www.noosphere.org
** update FAQ
*** how do I see pdfs instead of .dbk files?

* Nooron features
** fix Content-Type of http://mybox:9001/know/PRIMORDIAL_KB
** fix up nooron_app.html
** debug pattern_language.dbk
** get transform_dbk_2_ps and transform_dbk_2_pdf working

* completeness
** make nooron.py sensitive to commandline parameters
** finish nooron (init.d script)
** log errors to separate error log
** some authorization stubbed in
** make /know/pert/ a surfable thing (kb?, place?)
** implement proper cache flushing, tee hee
* useability
** fix available garments defaults for site_front.html and other weirdos
** fix truncated (at char 1024) error reporting
** put "available actions" and "available garments" in better places
   Probably redo entire layout of standard_master
*** put "main" across entire window to permit rendering before trailing
    unsized images are available
* correctness
** ensure that slots with a CARDINALITY of 1 only return a single value
   (specifically, the :DOCUMENTATION slot on frames in the PRIMORDIAL_KB)
** what the hell is http://192.168.1.11/__openable_kbs.html doing?
** not automatically writing to the correct kb (ie a nooron_data KB)
** save_kb (respect kb_local_only_p by telling parent kbs to save too)
* performance
** debug putting PRIMORDIAL_KB only at the root
** is there value in marking a frame as being the deepest of that name
   and hence all deeper kbs can be ignored (for some purposes)


BUGS
** wrong garment options on site_front_as_html
** orange and green!
** ensure that kb_as_html is default template for kbs

after v0.2
* implement IntermediateReferent (or SubjectIndicators?)
Instances of IntermediateReferent are frames which
can be bibliographic references, URL's and their titles, 
or SubjectIndictators ala TopicMaps.
* come up with better terminology for distinguishing Nooron Apps (equivalent
to Zope products) from nooron_app_instances (which are the instances of those
products)
* create individual directories for nooron_apps, where the _ontology, 
_wardrobe and garments all live.  (Along with procedures and widgets,
when they get systematized.)
* update http://www.noosphere.org/background/how_to
* wrap garments in knowledge
Hmm, two goals: 
  1) keep the garments on-disk as trivially editable files
  2) make them appear to be frames (for metadata)
Solutions:
  1) Come up with some Connection type (or kb-type?) which treats files
  as frames and merges into them any other info discovered in a per-directory
  .pykb or .tell
  2) put all the frame info *into* the garments as leading comments
    (ala Zope's on-disk representation of dtml, python-script, etc. )
  3) look for a .tell file beside each normal content file (e.g. each npt)

[Really should ontologize Analysis so that one can peek into 
 the analysis associated with any old thing.  Include: goals, proposals, 
 pros+cons]

TODO (prioritized as above, roughly)
  - deliver templates by version

  - store evaluations (in sql?)
  - create evaluation facilities
  - filter/sort/format things on the basis of evaluations 
      (or other attributes)
 
  - ensure that here/blah uses acquisition-like something
  - test root/blah and container/blah
  - implement adding of topics
    - set up form and action architecture
      - early uses to include:
        - loading KBs
        - creating frames
        - creating KBs
        - save_as

  - create user authentication system
    - implement NotSoBasicAuth

  - display weblog.xtm
  - generate some svg now
  - time for users


